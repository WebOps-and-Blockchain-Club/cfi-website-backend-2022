# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AddCLubsInput {
  clubIds: [String!]!
  contact: String!
  name: String!
  slots: String!
}

type Blog {
  author: String
  club: Club
  content: String
  createdBy: User!
  description: String
  id: String!
  image: Image
  readingTime: Float
  status: BlogStatus!
  tags: [Tag!]
  title: String!
  updatedAt: DateTime!
  views: Float!
}

enum BlogStatus {
  APPROVED
  APPROVED_BY_CLUB
  DRAFT
  PENDING
  REJECTED
  REJECTED_BY_CLUB
}

type Club {
  email: String!
  id: String!
  name: String!
  projects: [Project!]!
  slot: String
  users: [User!]
}

type Comment {
  createdAt: DateTime!
  createdBy: User!
  description: String!
  id: String!
}

input CreateBlogInput {
  author: String
  clubId: String
  content: String
  description: String
  id: String
  imageData: Upload
  imageUrl: String
  readingTime: Float
  status: BlogStatus!
  tagIds: [String!]
  title: String!
}

input CreateClubInput {
  email: String!
  name: String!
}

input CreateCommentInput {
  description: String!
  projectId: String!
}

input CreateProjectInput {
  clubIds: [String!]!
  contact: String!
  id: String
  q1: String
  q2: String
  q3: String
  q4: String
  status: ProjectStatus!
  title: String!
}

input CreateTagInput {
  name: String!
}

input CreateTagsInput {
  names: [String!]!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input EditTagInput {
  name: String
}

input FilterBlog {
  clubId: [String!]
  clubName: [String!]
  search: String
  tagIds: [String!]
  tagNames: [String!]
}

input FilterProject {
  clubIds: [String!]
  clubNames: [String!]
  search: String
}

type GetBlogsOutput {
  blogs: [Blog!]
  count: Float!
}

type GetProjectsOutput {
  count: Float!
  projects: [Project!]
}

type Image {
  createdAt: DateTime!
  id: String!
  name: String!
  url: String!
}

input LoginInput {
  loginType: LoginType!
  token: String!
}

enum LoginType {
  ADMIN
  BLOG
  SIP
  SUMMERSCHOOL
}

type Mutation {
  addCLubs(addClubsInput: AddCLubsInput!): User!
  addSlot(clubId: String!, slot: String!): Club!
  createBlog(CreateBlogInput: CreateBlogInput!): Blog!
  createClub(CreateClubInput: CreateClubInput!): Boolean!
  createComment(CreateCommentInput: CreateCommentInput!): Comment!
  createProject(CreateProjectInput: CreateProjectInput!): Project!
  createTag(CreateTagInput: CreateTagInput!): Boolean!
  createTags(CreateTagsInput: CreateTagsInput!): Boolean!
  deleteAllProjects(ProjectId: String!): Boolean!
  deleteComment(CommentId: String!): Boolean!
  editTag(EditTagInput: EditTagInput!, TagId: String!): Boolean!
  login(LoginInputs: LoginInput!): User!
  logout: Boolean!
  suggestEdit(BlogId: String!, Content: String!): Boolean!
  toggleLikeProject(ProjectId: String!): Boolean!
  updateBlogStatus(BlogId: String!, BlogStatus: String!): Boolean!
  updateViews(BlogId: String!): Boolean
  uploadImage(Image: [Upload!]!): [Image!]!
}

input Pagination {
  skip: Float!
  take: Float!
}

type Project {
  clubs: [Club!]!
  comments: [Comment!]!
  contact: String!
  createdBy: User!
  id: String!
  isLiked: Boolean!
  likeCount: Float!
  q1: String
  q2: String
  q3: String
  q4: String
  status: ProjectStatus!
  title: String!
  updatedAt: DateTime!
}

enum ProjectStatus {
  DRAFT
  PUBLIC
}

type Query {
  deleteImage(ImageName: String!): Boolean!
  getBlog(BlogId: String!): Blog
  getBlogs(Filters: FilterBlog, Pagination: Pagination): GetBlogsOutput!
  getClubs: [Club!]!
  getMe: User!
  getProject(ProjectId: String!): Project
  getProjects(Filters: FilterProject, Pagination: Pagination): GetProjectsOutput!
  getTag(TagId: String, TagName: String): Tag
  getTags: [Tag!]
}

type Tag {
  blogs(Filters: FilterBlog, Pagination: Pagination): GetBlogsOutput!
  id: String!
  name: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  blogs: [Blog!]
  clubs: [Club!]
  contact: String
  email: String!
  id: String!
  name: String!
  projects: [Project!]
  role: UserRole!
  slots: String
}

enum UserRole {
  ADMIN
  DEV
  MEMBER
  USER
}
